cmake_minimum_required (VERSION 3.1)

project (dfnn)

file(GLOB_RECURSE Project_SOURCES "src/*.cpp")
file(GLOB_RECURSE Project_HEADERS "inc/*.h")
file(GLOB_RECURSE Project_Test_SOURCES "tst/*.cpp")
file(GLOB_RECURSE Project_Test_HEADERS "tst/*.h")
file(GLOB_RECURSE Project_Env_SOURCES "env/*.cpp")
file(GLOB_RECURSE Project_Env_HEADERS "env/*.h")
file(GLOB_RECURSE External_SOURCES "ext/*.cpp")
file(GLOB_RECURSE External_HEADERS "ext/*.h")
file(GLOB_RECURSE BenchCreation_SOURCES "bench/bench_creation.cpp")
file(GLOB_RECURSE BenchPump_SOURCES "bench/bench_pump.cpp")
file(GLOB_RECURSE BenchTopology_SOURCES "bench/bench_topology.cpp")

set (Project_INCLUDE_DIRS "")
set (Project_Test_INCLUDE_DIRS "")

foreach (_headerFile ${Project_HEADERS})
    get_filename_component(_dir ${_headerFile} PATH)
    list (APPEND Project_INCLUDE_DIRS ${_dir})
endforeach()

foreach (_headerFile ${External_HEADERS})
    get_filename_component(_dir ${_headerFile} PATH)
    list (APPEND Project_INCLUDE_DIRS ${_dir})
endforeach()

foreach (_headerFile ${Project_Test_HEADERS})
    get_filename_component(_dir ${_headerFile} PATH)
    list (APPEND Project_Test_INCLUDE_DIRS ${_dir})
endforeach()

list(REMOVE_DUPLICATES Project_INCLUDE_DIRS)
list(REMOVE_DUPLICATES Project_Test_INCLUDE_DIRS)

include_directories(${Project_INCLUDE_DIRS})

add_library (dfnn SHARED ${Project_SOURCES} ${External_SOURCES} )
add_executable (dfnn_test ${Project_Test_SOURCES} )
add_executable (dfnn_env ${Project_Env_SOURCES} )
add_executable (bench_creation ${BenchCreation_SOURCES} )
add_executable (bench_pump ${BenchPump_SOURCES} )
add_executable (bench_topology ${BenchTopology_SOURCES} )
set_property(TARGET bench_creation PROPERTY RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bench")
set_property(TARGET bench_pump PROPERTY RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bench")
set_property(TARGET bench_topology PROPERTY RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bench")
target_link_libraries(dfnn_test dfnn)
target_link_libraries(dfnn_env dfnn)
target_link_libraries(bench_creation dfnn)
target_link_libraries(bench_pump dfnn)
target_link_libraries(bench_topology dfnn)

set_property(TARGET dfnn PROPERTY CXX_STANDARD 14)
set_property(TARGET dfnn_test PROPERTY CXX_STANDARD 14)
set_property(TARGET dfnn_env PROPERTY CXX_STANDARD 14)
set_property(TARGET bench_creation PROPERTY CXX_STANDARD 14)
set_property(TARGET bench_pump PROPERTY CXX_STANDARD 14)
set_property(TARGET bench_topology PROPERTY CXX_STANDARD 14)
find_package (Threads)
target_link_libraries (dfnn ${CMAKE_THREAD_LIBS_INIT})

include(CheckCXXCompilerFlag)

CHECK_CXX_COMPILER_FLAG("-march=native" HAS_FLAG_MARCH_NATIVE)
if (HAS_FLAG_MARCH_NATIVE)
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -march=native")
endif()

CHECK_CXX_COMPILER_FLAG("-mtune=native" HAS_FLAG_MTUNE_NATIVE)
if (HAS_FLAG_MTUNE_NATIVE)
    set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -mtune=native")
endif()

CHECK_CXX_COMPILER_FLAG("-pthread" HAS_FLAG_PTHREAD)
if (HAS_FLAG_PTHREAD)
    set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -pthread")
endif()
